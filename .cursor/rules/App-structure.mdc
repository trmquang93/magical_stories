---
description: Application Structure & Navigation Guidelines
globs: 
---
### üèóÔ∏è **Application Structure & Navigation Guidelines**

## **1Ô∏è‚É£ Navigation Structure**
The app uses a tab-based navigation structure with the following key components:

### **Main Navigation (`MainNavigation`)**
- Uses `TabController` for managing tab navigation
- Contains 4 main tabs:
  1. Home Screen
  2. Library (Stories)
  3. Audio Stories
  4. Settings

### **Navigation Patterns**
```dart
// Example of proper tab navigation implementation
void _navigateToTab(BuildContext context, int index) {
  final tabController = DefaultTabController.of(context);
  if (tabController != null) {
    tabController.animateTo(index);
  } else {
    // Fallback to route-based navigation
    switch (index) {
      case 1: Navigator.pushNamed(context, '/library');
      case 2: Navigator.pushNamed(context, '/audio');
      case 3: Navigator.pushNamed(context, '/settings');
    }
  }
}
```

## **2Ô∏è‚É£ Screen Structure**
Each main screen follows this hierarchy:
```
MainNavigation
‚îú‚îÄ‚îÄ HomeScreen
‚îÇ   ‚îî‚îÄ‚îÄ StoryForm (Modal)
‚îú‚îÄ‚îÄ StoriesScreen
‚îÇ   ‚îî‚îÄ‚îÄ StoryDisplayScreen (Push)
‚îú‚îÄ‚îÄ AudioStoriesScreen
‚îÇ   ‚îî‚îÄ‚îÄ AudioPlayerScreen (Push)
‚îî‚îÄ‚îÄ SettingsScreen
```

## **3Ô∏è‚É£ State Management**
The app uses Provider pattern with the following providers:
- `StoryProvider`: Manages story generation and storage
- `SettingsProvider`: Handles app settings and preferences
- `FormDataProvider`: Manages form state and persistence

## **4Ô∏è‚É£ Important Implementation Notes**

### **Tab Navigation**
‚úÖ **DO:**
- Use the `_navigateToTab` helper method for consistent navigation
- Provide fallback navigation routes
- Handle navigation errors gracefully

‚ùå **DON'T:**
- Directly access `DefaultTabController` without null checks
- Mix tab and stack navigation without proper handling
- Assume tab controller is always available

### **Modal Sheets**
For forms and temporary UI, use `showModalBottomSheet`:
```dart
showModalBottomSheet(
  context: context,
  isScrollControlled: true,
  builder: (context) => const Padding(
    padding: EdgeInsets.all(16.0),
    child: StoryForm(),
  ),
);
```

### **Screen Transitions**
For full-screen transitions, use `MaterialPageRoute`:
```dart
Navigator.push(
  context,
  MaterialPageRoute(
    builder: (context) => StoryDisplayScreen(
      title: story.title,
      content: story.content,
    ),
  ),
);
```

## **5Ô∏è‚É£ Provider Setup**
Ensure providers are initialized in the correct order:
```dart
MultiProvider(
  providers: [
    ChangeNotifierProvider(create: (_) => StoryProvider()),
    ChangeNotifierProvider(create: (_) => SettingsProvider(prefs)),
    ChangeNotifierProvider(create: (_) => FormDataProvider()),
  ],
  child: MaterialApp(...),
);
```

## **6Ô∏è‚É£ Route Names**
Standard route names for consistency:
- `/`: Home screen (default)
- `/library`: Stories library
- `/audio`: Audio stories
- `/settings`: App settings
- `/story/:id`: Individual story view
- `/audio/:id`: Audio story player

## **7Ô∏è‚É£ Error Handling**
Always implement proper error handling for navigation:
- Check for null tab controllers
- Provide fallback navigation options
- Handle deep linking appropriately
- Show appropriate error messages to users

---

üîç **Note:** This structure is designed to support the app's core features while maintaining scalability and maintainability. When adding new features, follow these patterns for consistency. 